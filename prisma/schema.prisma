// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String    @id
  ci        String    @unique
  username  String    @unique
  password  String
  firstName String
  lastName  String
  role      Role      @default(USER)
  office_id String
  messages  Message[]
  notifications Notification[]
  createdForums Forum[]   @relation("ForumCreator")

  @@map("user")
}

model Office {
  id    String       @id
  abrev String
  name  String
  memos MemoOffice[]

  @@map("offices")
}

enum InstructionStatus {
  PENDING
  ASSIGNED
}

model Memo {
  id               String            @id
  name             String
  applicant        String
  reception_method String
  instruction      String?           // Make it optional
  instruction_status InstructionStatus @default(PENDING)  // Add this field
  response_require String
  urgency          String?
  observation      String
  reception_date   DateTime          @db.Date
  reception_hour   String
  reception_images Json              // Array of reception proof images
  attachment_type  Json              // Store array as JSON string
  attachment_files Json?             // Optional array of attachment files
  status          String            @default("PENDING")
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt

  offices MemoOffice[]
  forums  Forum[]
  notifications Notification[]

  @@map("memos")
}

enum ForumStatus {
  OPEN
  CLOSED
}

model Forum {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  memo_id       String
  created_by    String        @default("1178d681-8b9c-4ac2-bd9f-b11b0985ff94")
  status        ForumStatus    @default(OPEN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt @default(now())
  messages      Message[]
  notifications Notification[]

  memo    Memo @relation(fields: [memo_id], references: [id])
  creator User @relation(name: "ForumCreator", fields: [created_by], references: [id])

  @@map("forums")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  user_id   String // Change this to String to match User.id
  forum_id  Int
  fileUrl   String?  // Add these
  fileName  String?  // new fields

  user  User  @relation(fields: [user_id], references: [id])
  forum Forum @relation(fields: [forum_id], references: [id])

  @@map("messages")
}

model MemoOffice {
  memo_id   String
  office_id String

  memo   Memo   @relation(fields: [memo_id], references: [id])
  office Office @relation(fields: [office_id], references: [id])

  @@id([memo_id, office_id])
  @@map("memos_offices")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user_id   String
  forum_id  Int?     // Make forum_id optional
  memo_id   String?  // Add memo_id field
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  deleted   Boolean  @default(false)

  user  User  @relation(fields: [user_id], references: [id])
  forum Forum? @relation(fields: [forum_id], references: [id])
  memo  Memo?  @relation(fields: [memo_id], references: [id])

  @@map("notifications")
}

model SentMemo {
  id             String   @id @default(uuid())
  title          String
  registeredBy   String
  registerDate   DateTime @default(now())
  receptionImage String   // Path to the image
  pdfWithQR      String?  // Path to the generated PDF with QR
  qrCode         String?  // Path to the QR code image
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("sent_memos")
}

enum DecisionStatus {
  PENDIENTE
  APROBADO
  RECHAZADO
}

model PuntoCuenta {
  id           String        @id @default(uuid())
  numero       String        @unique
  tipo         String
  fecha        DateTime      @db.Date
  presentante  Json
  asunto       String
  decision     DecisionStatus @default(PENDIENTE)
  observacion  String
  documento_escaneado String?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@map("puntos_cuenta")
}

enum OficioStatus {
  FINALIZADO
  PENDIENTE
}

model OficioPresidencia {
  id                String       @id @default(uuid())
  numero            String       @unique  // NRO. OFICIO
  elaboradoPor      String       // ELABORADO POR
  institucion       String       // INSTITUCIÓN
  destinatario      String       // DESTINATARIO
  asunto            String       // ASUNTO
  fechaElaboracion  DateTime     @db.Date  // FECHA ELABORACIÓN
  fechaEntrega      DateTime     @db.Date  // FECHA ENTREGA
  requiereRespuesta Boolean      // REQUIERE RESPUESTA
  status            OficioStatus @default(PENDIENTE)  // ESTATUS
  documento_escaneado String?    // Path to scanned document
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  @@map("oficios_presidencia")
}
